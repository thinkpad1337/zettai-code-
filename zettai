#!/usr/bin/env python3
import os
import shutil
import subprocess
from PyQt5.QtWidgets import (QApplication, QMainWindow, QVBoxLayout, QWidget,
                             QPushButton, QCheckBox, QProgressBar, QLabel,
                             QMessageBox, QTextEdit)
from PyQt5.QtCore import QThread, pyqtSignal, Qt

class CacheCleanerThread(QThread):
    update_progress = pyqtSignal(int)
    update_log = pyqtSignal(str)
    cleaning_finished = pyqtSignal()

    def __init__(self, clean_pacman, clean_user, clean_logs):
        super().__init__()
        self.clean_pacman = clean_pacman
        self.clean_user = clean_user
        self.clean_logs = clean_logs

    def run(self):
        try:
            if self.clean_pacman:
                self.update_log.emit("üßπ –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ Pacman...")
                pacman_cache = "/var/cache/pacman/pkg/"
                if os.path.exists(pacman_cache):
                    subprocess.run(['pkexec', 'rm', '-rf', pacman_cache], check=True)
                    subprocess.run(['pkexec', 'mkdir', '-p', pacman_cache], check=True)
                    self.update_log.emit("‚úÖ –ö–µ—à Pacman –æ—á–∏—â–µ–Ω!")
                else:
                    self.update_log.emit("‚ö†Ô∏è –ü–∞–ø–∫–∞ /var/cache/pacman/pkg/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                self.update_progress.emit(33)

            if self.clean_user:
                self.update_log.emit("üßπ –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
                user_cache = os.path.expanduser("~/.cache/")
                if os.path.exists(user_cache):
                    shutil.rmtree(user_cache)
                    os.makedirs(user_cache, exist_ok=True)
                    self.update_log.emit("‚úÖ –ö–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω!")
                else:
                    self.update_log.emit("‚ö†Ô∏è –ü–∞–ø–∫–∞ ~/.cache/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                self.update_progress.emit(66)

            if self.clean_logs:
                self.update_log.emit("üßπ –û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤...")
                log_dir = "/var/log/"
                if os.path.exists(log_dir):
                    subprocess.run(['pkexec', 'find', log_dir, '-type', 'f', '-delete'], check=True)
                    self.update_log.emit("‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã!")
                else:
                    self.update_log.emit("‚ö†Ô∏è –ü–∞–ø–∫–∞ /var/log/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                self.update_progress.emit(100)

        except subprocess.CalledProcessError as e:
            self.update_log.emit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
        except Exception as e:
            self.update_log.emit(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        finally:
            self.cleaning_finished.emit()

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Zettai Ryouiki Cache Cleaner")
        self.setFixedSize(500, 450)

        # –ì–ª–∞–≤–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("Zettai Ryouiki Cache Cleaner")
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet("font-size: 18px; font-weight: bold;")
        layout.addWidget(title)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–º–µ—Ä–µ –∫–µ—à–∞
        self.cache_info = QLabel()
        layout.addWidget(self.cache_info)

        # –ß–µ–∫–±–æ–∫—Å—ã
        self.pacman_check = QCheckBox("–û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à Pacman (/var/cache/pacman/pkg/)")
        self.pacman_check.setChecked(True)
        layout.addWidget(self.pacman_check)

        self.user_check = QCheckBox("–û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (~/.cache/)")
        self.user_check.setChecked(True)
        layout.addWidget(self.user_check)

        self.logs_check = QCheckBox("–û—á–∏—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏ (/var/log/)")
        self.logs_check.setChecked(True)
        layout.addWidget(self.logs_check)

        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress = QProgressBar()
        layout.addWidget(self.progress)

        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏
        self.clean_btn = QPushButton("–û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ")
        self.clean_btn.clicked.connect(self.start_cleaning)
        layout.addWidget(self.clean_btn)

        # –õ–æ–≥
        self.log = QTextEdit()
        self.log.setReadOnly(True)
        layout.addWidget(self.log)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–µ—à–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –≤–∏–¥–∂–µ—Ç–æ–≤
        self.update_cache_size()

    def update_cache_size(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–µ –∫–µ—à–∞ –∏ –ª–æ–≥–æ–≤"""
        pacman_size = self.get_folder_size("/var/cache/pacman/pkg/")
        user_size = self.get_folder_size(os.path.expanduser("~/.cache/"))
        log_size = self.get_folder_size("/var/log/")
        self.cache_info.setText(
            f"–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä:\n"
            f"Pacman: {self.format_size(pacman_size)}\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {self.format_size(user_size)}\n"
            f"–õ–æ–≥–∏: {self.format_size(log_size)}"
        )

    def get_folder_size(self, path):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–∞–ø–∫–∏ –≤ –±–∞–π—Ç–∞—Ö"""
        if not os.path.exists(path):
            return 0
        total = 0
        try:
            for entry in os.scandir(path):
                try:
                    if entry.is_file():
                        total += entry.stat().st_size
                    elif entry.is_dir():
                        if entry.name.startswith('download-'):
                            self.safe_log(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É: {entry.path}")
                            continue
                        total += self.get_folder_size(entry.path)
                except PermissionError:
                    self.safe_log(f"–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ: {entry.path}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
                    continue
        except PermissionError:
            self.safe_log(f"–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {path}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
            return 0
        return total

    def format_size(self, size):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        for unit in ['B', 'KB', 'MB', 'GB']:
            if size < 1024:
                return f"{size:.1f} {unit}"
            size /= 1024
        return f"{size:.1f} TB"

    def safe_log(self, message):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ª–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–Ω—Å–æ–ª—å, –µ—Å–ª–∏ self.log –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        if hasattr(self, 'log') and self.log is not None:
            self.append_log(message)
        else:
            print(message)

    def append_log(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥"""
        self.log.append(message)

    def start_cleaning(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—á–∏—Å—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if not (self.pacman_check.isChecked() or self.user_check.isChecked() or self.logs_check.isChecked()):
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏—á–µ–≥–æ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏!")
            return

        self.clean_btn.setEnabled(False)
        self.progress.setValue(0)
        self.log.clear()

        self.worker = CacheCleanerThread(
            self.pacman_check.isChecked(),
            self.user_check.isChecked(),
            self.logs_check.isChecked()
        )
        self.worker.update_progress.connect(self.progress.setValue)
        self.worker.update_log.connect(self.append_log)
        self.worker.cleaning_finished.connect(self.cleaning_done)
        self.worker.start()

    def cleaning_done(self):
        """–î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏"""
        self.clean_btn.setEnabled(True)
        self.update_cache_size()
        QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    app = QApplication([])
    window = MainWindow()
    window.show()
    app.exec_()
